[{"C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\index.js":"1","C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\App.js":"2","C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\serviceWorker.js":"3","C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\components\\main.js":"4","C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\components\\book.js":"5","C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\components\\thankYou.js":"6","C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\components\\navbar.js":"7","C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\components\\table.js":"8","C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\components\\login.js":"9"},{"size":550,"mtime":1670997191277,"results":"10","hashOfConfig":"11"},{"size":748,"mtime":1671019915570,"results":"12","hashOfConfig":"11"},{"size":5003,"mtime":1670901398653,"results":"13","hashOfConfig":"11"},{"size":938,"mtime":1671017301283,"results":"14","hashOfConfig":"11"},{"size":12779,"mtime":1671000600956,"results":"15","hashOfConfig":"11"},{"size":470,"mtime":1670901399185,"results":"16","hashOfConfig":"11"},{"size":962,"mtime":1671019594980,"results":"17","hashOfConfig":"11"},{"size":1293,"mtime":1670901399125,"results":"18","hashOfConfig":"11"},{"size":92,"mtime":1671018612172,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1qeg1dw",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"23"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"23"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"23"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\index.js",[],[],[],"C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\App.js",["52","53","54","55","56"],[],"C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\serviceWorker.js",[],[],"C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\components\\main.js",["57"],[],"import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nexport default (props) => {\n  return (\n    <div>\n      <div class=\"home swiper\" id=\"home\">\n        <div class=\"swiper-wrapper\">\n          <div class=\"swiper-slide container\">\n            <img\n              src={require(\"../images/1.jpg\")}\n              alt=\"cafe\"\n              className=\"big-img\"\n            />\n            <div class=\"home-text\">\n              <h1>CafeERA</h1>\n              <p className=\"looking-for-cafe\">\n                If you're looking for morring cafe\n              </p>\n              <Button\n                color=\"none\"\n                className=\"book-table-btn\"\n                onClick={(_) => {\n                  props.setPage(1);\n                }}\n              >\n                Book a Table\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"swiper\"></div>\n    </div>\n  );\n};\n","C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\components\\book.js",["58"],["59"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Row,\n  Col,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Input,\n  Button,\n} from \"reactstrap\";\n\nimport Table from \"./table\";\n\nexport default (props) => {\n  const [totalTables, setTotalTables] = useState([]);\n\n  // User's selections\n  const [selection, setSelection] = useState({\n    table: {\n      name: null,\n      id: null,\n    },\n    date: new Date(),\n    time: null,\n    location: \"Any Location\",\n    size: 0,\n  });\n\n  // User's booking details\n  const [booking, setBooking] = useState({\n    name: \"\",\n    phone: \"\",\n    email: \"\",\n  });\n\n  // List of potential locations\n  const [locations] = useState([\"Any Location\", \"Patio\", \"Inside\", \"Bar\"]);\n  const [times] = useState([\n    \"9AM\",\n    \"10AM\",\n    \"11AM\",\n    \"12PM\",\n    \"1PM\",\n    \"2PM\",\n    \"3PM\",\n    \"4PM\",\n    \"5PM\",\n  ]);\n  // Basic reservation \"validation\"\n  const [reservationError, setReservationError] = useState(false);\n\n  const getDate = (_) => {\n    const months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    const date =\n      months[selection.date.getMonth()] +\n      \" \" +\n      selection.date.getDate() +\n      \" \" +\n      selection.date.getFullYear();\n    let time = selection.time.slice(0, -2);\n    time = selection.time > 12 ? time + 12 + \":00\" : time + \":00\";\n    console.log(time);\n    const datetime = new Date(date + \" \" + time);\n    return datetime;\n  };\n\n  const getEmptyTables = (_) => {\n    let tables = totalTables.filter((table) => table.isAvailable);\n    return tables.length;\n  };\n\n  useEffect(() => {\n    // Check availability of tables from DB when a date and time is selected\n    if (selection.time && selection.date) {\n      (async (_) => {\n        let datetime = getDate();\n        let res = await fetch(\"http://localhost:3005/availability\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            date: datetime,\n          }),\n        });\n        res = await res.json();\n        // Filter available tables with location and group size criteria\n        let tables = res.tables.filter(\n          (table) =>\n            (selection.size > 0 ? table.capacity >= selection.size : true) &&\n            (selection.location !== \"Any Location\"\n              ? table.location === selection.location\n              : true)\n        );\n        setTotalTables(tables);\n      })();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selection.time, selection.date, selection.size, selection.location]);\n\n  // Make the reservation if all details are filled out\n  const reserve = async (_) => {\n    if (\n      (booking.name.length === 0) |\n      (booking.phone.length === 0) |\n      (booking.email.length === 0)\n    ) {\n      console.log(\"Incomplete Details\");\n      setReservationError(true);\n    } else {\n      const datetime = getDate();\n      let res = await fetch(\"http://localhost:3005/reserve\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          ...booking,\n          date: datetime,\n          table: selection.table.id,\n        }),\n      });\n      res = await res.text();\n      console.log(\"Reserved: \" + res);\n      props.setPage(2);\n    }\n  };\n\n  // Clicking on a table sets the selection state\n  const selectTable = (table_name, table_id) => {\n    setSelection({\n      ...selection,\n      table: {\n        name: table_name,\n        id: table_id,\n      },\n    });\n  };\n\n  // Generate party size dropdown\n  const getSizes = (_) => {\n    let newSizes = [];\n\n    for (let i = 1; i < 8; i++) {\n      newSizes.push(\n        <DropdownItem\n          key={i}\n          className=\"booking-dropdown-item\"\n          onClick={(e) => {\n            let newSel = {\n              ...selection,\n              table: {\n                ...selection.table,\n              },\n              size: i,\n            };\n            setSelection(newSel);\n          }}\n        >\n          {i}\n        </DropdownItem>\n      );\n    }\n    return newSizes;\n  };\n\n  // Generate locations dropdown\n  const getLocations = (_) => {\n    let newLocations = [];\n    locations.forEach((loc) => {\n      newLocations.push(\n        <DropdownItem\n          key={loc}\n          className=\"booking-dropdown-item\"\n          onClick={(_) => {\n            let newSel = {\n              ...selection,\n              table: {\n                ...selection.table,\n              },\n              location: loc,\n            };\n            setSelection(newSel);\n          }}\n        >\n          {loc}\n        </DropdownItem>\n      );\n    });\n    return newLocations;\n  };\n\n  // Generate locations dropdown\n  const getTimes = (_) => {\n    let newTimes = [];\n    times.forEach((time) => {\n      newTimes.push(\n        <DropdownItem\n          key={time}\n          className=\"booking-dropdown-item\"\n          onClick={(_) => {\n            let newSel = {\n              ...selection,\n              table: {\n                ...selection.table,\n              },\n              time: time,\n            };\n            setSelection(newSel);\n          }}\n        >\n          {time}\n        </DropdownItem>\n      );\n    });\n    return newTimes;\n  };\n\n  // Generating tables from available tables state\n  const getTables = (_) => {\n    console.log(\"Getting tables\");\n    if (getEmptyTables() > 0) {\n      let tables = [];\n      totalTables.forEach((table) => {\n        if (table.isAvailable) {\n          tables.push(\n            <Table\n              key={table._id}\n              id={table._id}\n              chairs={table.capacity}\n              name={table.name}\n              empty\n              selectTable={selectTable}\n            />\n          );\n        } else {\n          tables.push(\n            <Table\n              key={table._id}\n              id={table._id}\n              chairs={table.capacity}\n              name={table.name}\n              selectTable={selectTable}\n            />\n          );\n        }\n      });\n      return tables;\n    }\n  };\n\n  return (\n    <div>\n      <Row noGutters className=\"text-center align-items-center pizza-cta\">\n        <Col>\n          <p className=\"looking-for-cafe\">\n            {!selection.table.id ? \"Book a Table\" : \"Confirm Reservation\"}\n            <i\n              className={\n                !selection.table.id\n                  ? \"fas fa-chair pizza-slice\"\n                  : \"fas fa-clipboard-check pizza-slice\"\n              }\n            ></i>\n          </p>\n          <p className=\"selected-table\">\n            {selection.table.id\n              ? \"You are booking table \" + selection.table.name\n              : null}\n          </p>\n\n          {reservationError ? (\n            <p className=\"reservation-error\">\n              * Please fill out all of the details.\n            </p>\n          ) : null}\n        </Col>\n      </Row>\n\n      {!selection.table.id ? (\n        <div id=\"reservation-stuff\">\n          <Row noGutters className=\"text-center align-items-center\">\n            <Col xs=\"12\" sm=\"3\">\n              <input\n                type=\"date\"\n                required=\"required\"\n                className=\"booking-dropdown\"\n                value={selection.date.toISOString().split(\"T\")[0]}\n                onChange={(e) => {\n                  if (!isNaN(new Date(new Date(e.target.value)))) {\n                    let newSel = {\n                      ...selection,\n                      table: {\n                        ...selection.table,\n                      },\n                      date: new Date(e.target.value),\n                    };\n                    setSelection(newSel);\n                  } else {\n                    console.log(\"Invalid date\");\n                    let newSel = {\n                      ...selection,\n                      table: {\n                        ...selection.table,\n                      },\n                      date: new Date(),\n                    };\n                    setSelection(newSel);\n                  }\n                }}\n              ></input>\n            </Col>\n            <Col xs=\"12\" sm=\"3\">\n              <UncontrolledDropdown>\n                <DropdownToggle color=\"none\" caret className=\"booking-dropdown\">\n                  {selection.time === null ? \"Select a Time\" : selection.time}\n                </DropdownToggle>\n                <DropdownMenu right className=\"booking-dropdown-menu\">\n                  {getTimes()}\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            </Col>\n            <Col xs=\"12\" sm=\"3\">\n              <UncontrolledDropdown>\n                <DropdownToggle color=\"none\" caret className=\"booking-dropdown\">\n                  {selection.location}\n                </DropdownToggle>\n                <DropdownMenu right className=\"booking-dropdown-menu\">\n                  {getLocations()}\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            </Col>\n            <Col xs=\"12\" sm=\"3\">\n              <UncontrolledDropdown>\n                <DropdownToggle color=\"none\" caret className=\"booking-dropdown\">\n                  {selection.size === 0\n                    ? \"Select a Party Size\"\n                    : selection.size.toString()}\n                </DropdownToggle>\n                <DropdownMenu right className=\"booking-dropdown-menu\">\n                  {getSizes()}\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            </Col>\n          </Row>\n          <Row noGutters className=\"tables-display\">\n            <Col>\n              {getEmptyTables() > 0 ? (\n                <p className=\"available-tables\">{getEmptyTables()} available</p>\n              ) : null}\n\n              {selection.date && selection.time ? (\n                getEmptyTables() > 0 ? (\n                  <div>\n                    <div className=\"table-key\">\n                      <span className=\"empty-table\"></span> &nbsp; Available\n                      &nbsp;&nbsp;\n                      <span className=\"full-table\"></span> &nbsp; Unavailable\n                      &nbsp;&nbsp;\n                    </div>\n                    <Row noGutters>{getTables()}</Row>\n                  </div>\n                ) : (\n                  <p className=\"table-display-message\">No Available Tables</p>\n                )\n              ) : (\n                <p className=\"table-display-message\">\n                  Please select a date and time for your reservation.\n                </p>\n              )}\n            </Col>\n          </Row>\n        </div>\n      ) : (\n        <div id=\"confirm-reservation-stuff\">\n          <Row\n            noGutters\n            className=\"text-center justify-content-center reservation-details-container\"\n          >\n            <Col xs=\"12\" sm=\"3\" className=\"reservation-details\">\n              <Input\n                type=\"text\"\n                bsSize=\"lg\"\n                placeholder=\"Name\"\n                className=\"reservation-input\"\n                value={booking.name}\n                onChange={(e) => {\n                  setBooking({\n                    ...booking,\n                    name: e.target.value,\n                  });\n                }}\n              />\n            </Col>\n            <Col xs=\"12\" sm=\"3\" className=\"reservation-details\">\n              <Input\n                type=\"text\"\n                bsSize=\"lg\"\n                placeholder=\"Phone Number\"\n                className=\"reservation-input\"\n                value={booking.phone}\n                onChange={(e) => {\n                  setBooking({\n                    ...booking,\n                    phone: e.target.value,\n                  });\n                }}\n              />\n            </Col>\n            <Col xs=\"12\" sm=\"3\" className=\"reservation-details\">\n              <Input\n                type=\"text\"\n                bsSize=\"lg\"\n                placeholder=\"Email\"\n                className=\"reservation-input\"\n                value={booking.email}\n                onChange={(e) => {\n                  setBooking({\n                    ...booking,\n                    email: e.target.value,\n                  });\n                }}\n              />\n            </Col>\n          </Row>\n          <Row noGutters className=\"text-center\">\n            <Col>\n              <Button\n                color=\"none\"\n                className=\"book-table-btn\"\n                onClick={(_) => {\n                  reserve();\n                }}\n              >\n                Book Now\n              </Button>\n            </Col>\n          </Row>\n        </div>\n      )}\n    </div>\n  );\n};\n","C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\components\\thankYou.js",["60"],[],"import React from \"react\";\nimport { Row, Col } from \"reactstrap\";\n\nexport default _ => {\n  return (\n    <div>\n      <Row noGutters className=\"text-center\">\n        <Col>\n          <p className=\"thanks-header\">Thank You!</p>\n          <i className=\"fas fa-pizza-slice thank-you-pizza\"></i>\n          <p className=\"thanks-subtext\">\n            You should receive an email with the details of your reservation.\n          </p>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n","C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\components\\navbar.js",["61","62"],[],"C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\components\\table.js",["63"],[],"import React from \"react\";\nimport { Row, Col } from \"reactstrap\";\n\nexport default props => {\n  const getRow1 = _ => {\n    let chairs = [];\n    for (var i = 0; i < Math.ceil(props.chairs / 2); i++) {\n      chairs.push(\n        <span\n          key={i}\n          className={props.empty ? \"empty-table\" : \"full-table\"}\n        ></span>\n      );\n    }\n    return chairs;\n  };\n  const getRow2 = _ => {\n    let chairs2 = [];\n    for (var i = 0; i < Math.floor(props.chairs / 2); i++) {\n      chairs2.push(\n        <span\n          key={i}\n          className={props.empty ? \"empty-table\" : \"full-table\"}\n        ></span>\n      );\n    }\n    return chairs2;\n  };\n\n  return (\n    <div className=\"table-container\">\n      <Col\n        className={props.empty ? \"table selectable-table\" : \"table\"}\n        onClick={_ => {\n          props.empty\n            ? props.selectTable(props.name, props.id)\n            : console.log(\"Tried to select a full table\");\n        }}\n      >\n        <Row noGutters className=\"table-row\">\n          <Col className=\"text-center\">{getRow1()}</Col>\n        </Row>\n        <Row noGutters className=\"table-row\">\n          <Col className=\"text-center\">{getRow2()}</Col>\n        </Row>\n\n        <p className=\"text-center table-name\">{props.name}</p>\n      </Col>\n    </div>\n  );\n};\n","C:\\Users\\workplace\\Documents\\GitHub\\cafe-site\\frontend\\UI\\src\\components\\login.js",["64"],[],{"ruleId":"65","severity":1,"message":"66","line":8,"column":27,"nodeType":"67","messageId":"68","endLine":8,"endColumn":33},{"ruleId":"65","severity":1,"message":"69","line":8,"column":35,"nodeType":"67","messageId":"68","endLine":8,"endColumn":41},{"ruleId":"65","severity":1,"message":"70","line":8,"column":43,"nodeType":"67","messageId":"68","endLine":8,"endColumn":48},{"ruleId":"65","severity":1,"message":"71","line":9,"column":8,"nodeType":"67","messageId":"68","endLine":9,"endColumn":12},{"ruleId":"72","severity":1,"message":"73","line":11,"column":1,"nodeType":"74","endLine":24,"endColumn":3},{"ruleId":"72","severity":1,"message":"73","line":4,"column":1,"nodeType":"74","endLine":36,"endColumn":3},{"ruleId":"72","severity":1,"message":"73","line":15,"column":1,"nodeType":"74","endLine":457,"endColumn":3},{"ruleId":"75","severity":1,"message":"76","line":113,"column":6,"nodeType":"77","endLine":113,"endColumn":74,"suggestions":"78","suppressions":"79"},{"ruleId":"72","severity":1,"message":"73","line":4,"column":1,"nodeType":"74","endLine":18,"endColumn":3},{"ruleId":"65","severity":1,"message":"80","line":5,"column":10,"nodeType":"67","messageId":"68","endLine":5,"endColumn":17},{"ruleId":"72","severity":1,"message":"73","line":7,"column":1,"nodeType":"74","endLine":35,"endColumn":3},{"ruleId":"72","severity":1,"message":"73","line":4,"column":1,"nodeType":"74","endLine":51,"endColumn":3},{"ruleId":"72","severity":1,"message":"73","line":3,"column":1,"nodeType":"74","endLine":5,"endColumn":3},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Route' is defined but never used.","'main' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getDate'. Either include it or remove the dependency array.","ArrayExpression",["81"],["82"],"'NavLink' is defined but never used.",{"desc":"83","fix":"84"},{"kind":"85","justification":"86"},"Update the dependencies array to be: [selection.time, selection.date, selection.size, selection.location, getDate]",{"range":"87","text":"88"},"directive","",[2691,2759],"[selection.time, selection.date, selection.size, selection.location, getDate]"]